<?php
// $Id: ffcustom.module

/**
 * Implements hook_init().
 */
function ffcustom_init() {
  global $theme_key;
  if (strpos($theme_key, 'bootstrap')===FALSE) {
    require_once(drupal_get_path('theme', 'bootstrap') . '/includes/process.inc');
  }
}

function ffcustom_menu_alter(&$items) {
  // Example - disable the page at node/add
  $items ['node/add/node-gallery-image']['access callback'] = FALSE;
}

function ffcustom_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'department_description' && $view_mode == 'full' && arg(0) == 'node') {

  if (isset($node->field_department['und'][0]['tid'])) {
    $redirect_path = 'taxonomy/term/' . $node->field_department['und'][0]['tid'];
    drupal_goto($redirect_path,array(),301);
    }
  }
}

// Prevent users from changing the department for descriptions
function ffcustom_form_department_description_node_form_alter(&$form, &$form_state, $form_id) {
  $role = user_role_load_by_name('Uber Manager');
  if (!user_has_role($role->rid)) {
    $form['field_department']['#access'] = 0;
  }
}

// Prevent users from changing some publishing options
function ffcustom_form_node_form_alter(&$form, &$form_state, $form_id) {
  $role = user_role_load_by_name('Uber Manager');
  if (!user_has_role($role->rid)) {
    $form['options']['promote']['#attributes']['disabled'] = TRUE;
    $form['options']['sticky']['#attributes']['disabled'] = TRUE;
  }
}

//  Disable Barcode URL value on audio file forms
function ffcustom_form_audio_file_node_form_alter(&$form, &$form_state, $form_id) {
  $form['field_barcode']['und']['0']['value']['#attributes']['disabled'] = TRUE;
}

function ffcustom_form_alter(&$form, &$form_state, $form_id) {
//      dpm($form);
  if (@$form['#node_edit_form']) {
    // Disable Twitter textfield
    $form['twitter']['status']['#attributes']['disabled'] = TRUE;
  }
//  $form['keys_1']['#attributes']['placeholder'] = "Search...";
}

// Set Twitter js to async
function ffcustom_js_alter(&$javascript) {
  foreach ($javascript as $name => &$values) {
    // Skip if not external.
    if ($values['type'] != 'external') {
      continue;
    }
    // Set async to true if file is platform.twitter.com/widgets.js
    if (strpos($name, 'platform.twitter.com/widgets.js') !== FALSE) {
      $values['async'] = TRUE;
      // Stop processing once we've modified .js.
      break;
    }
  }
}

/**
 * Implementation of hook_preprocess_image().
 *
 * Make images that use a full url be protocol relative.
 */
/**
function ffcustom_preprocess_image(&$variables) {

  // If the image URL starts with a protocol remove it and use a
  // relative protocol.
  $scheme = file_uri_scheme($variables['path']);
  $protocols = array('http', 'https');
  if ($scheme && in_array($scheme, $protocols)) {
    $variables['path'] = '//' . file_uri_target($variables['path']);
  }
}
*/
/**
 * Implements hook_file_url_alter().
 *
 * Make all URLs be protocol relative.
 * Note: protocol relatice URLs will cause IE7/8 to download stylesheets twice.
 */
function ffcustom_file_url_alter(&$url) {

  global $base_url;

  static $relative_base_url = NULL, $relative_base_length = NULL;

  $scheme = file_uri_scheme($url);

  // For some things (e.g., images) hook_file_url_alter can be called multiple
  // times. So, we have to be sure not to alter it multiple times. If we already
  // are relative protocol we can just return.
  // Only setup the and parse this stuff once.
  if (!$relative_base_url || !$relative_base_length) {
    $relative_base_url = '//' . file_uri_target($base_url);
    $relative_base_length = strlen($relative_base_url);
  }
  if (!$scheme && substr($url, 0, $relative_base_length) == $relative_base_url) {
    return;
  }

  // Handle the case where we have public files with the scheme public:// or
  // the case the relative path doesn't start with a /. Internal relative urls
  // have the base url prepended to them.
  if (!$scheme || $scheme == 'public') {

    // Internal Drupal paths.
    if (!$scheme) {
      $path = $url;
    }
    else {
      $wrapper = file_stream_wrapper_get_instance_by_scheme($scheme);
      $path = $wrapper->getDirectoryPath() . '/' . file_uri_target($url);
    }

    // Clean up Windows paths.
    $path = str_replace('\\', '/', $path);

    $url = $base_url . '/' . $path;
  }

  // Convert full URLs to relative protocol.
  $protocols = array('http', 'https');
  $scheme = file_uri_scheme($url);
  if ($scheme && in_array($scheme, $protocols)) {
    $url = '//' . file_uri_target($url);
  }
}

// Prevent update checks
function ffcustom_update_projects_alter(&$projects){
    unset($projects['videojs']);
    //dsm($projects);  // view a list of projects
}
